<?php

namespace Ebay\Common;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-05-27 at 16:04:25.
 */
class RequestTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Request
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Request('GeteBayDetails');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Ebay\Common\Request::setEndpoint
     * @todo   Implement testSetEndpoint().
     */
    public function testSetEndpoint() {
        
        $reflection = new \ReflectionClass($this->object);
 
        $reflection_property = $reflection->getProperty('endpoint');
        $reflection_property->setAccessible(true);
        
        $this->object->setEndpoint('endpoint');
        
        $this->assertEquals('endpoint',$reflection_property->getValue($this->object));
    }

    /**
     * @covers Ebay\Common\Request::getEndpoint
     * @todo   Implement testGetEndpoint().
     */
    public function testGetEndpoint() {
        
        $reflection = new \ReflectionClass($this->object);
 
        $reflection_property = $reflection->getProperty('endpoint');
        $reflection_property->setAccessible(true);
        $reflection_property->setValue($this->object,"Name");
 
        $this->assertEquals("Name",$this->object->getEndpoint());
    }

    /**
     * @covers Ebay\Common\Request::setCallHeader
     * @todo   Implement testSetCallHeader().
     */
    public function testSetCallHeader() {
        
        $reflection = new \ReflectionClass($this->object);
 
        $reflection_property = $reflection->getProperty('callHeader');
        $reflection_property->setAccessible(true);
        
        $this->object->setCallHeader('Test');
        
        $this->assertEquals('Test',$reflection_property->getValue($this->object));
    }

    /**
     * @covers Ebay\Common\Request::setCallFooter
     * @todo   Implement testSetCallFooter().
     */
    public function testSetCallFooter() {
        
        $reflection = new \ReflectionClass($this->object);
 
        $reflection_property = $reflection->getProperty('callFooter');
        $reflection_property->setAccessible(true);
        
        $this->object->setCallFooter('Test');
        
        $this->assertEquals('Test',$reflection_property->getValue($this->object));
    }

    /**
     * @covers Ebay\Common\Request::setRequestType
     * @todo   Implement testSetRequestType().
     */
    public function testSetRequestType() {
        
        $reflection = new \ReflectionClass($this->object);
 
        $reflection_property = $reflection->getProperty('requestType');
        $reflection_property->setAccessible(true);
        
        $this->object->setRequestType('Test');
        
        $this->assertEquals('Test',$reflection_property->getValue($this->object));
    }

    /**
     * @covers Ebay\Common\Request::getRequestType
     * @todo   Implement testGetRequestType().
     */
    public function testGetRequestType() {
        
        $reflection = new \ReflectionClass($this->object);
 
        $reflection_property = $reflection->getProperty('requestType');
        $reflection_property->setAccessible(true);
        $reflection_property->setValue($this->object,"Name");
 
        $this->assertEquals("Name",$this->object->getRequestType());
    }

    /**
     * @covers Ebay\Common\Request::setResponseType
     * @todo   Implement testSetResponseType().
     */
    public function testSetResponseType() {
        
        $reflection = new \ReflectionClass($this->object);
 
        $reflection_property = $reflection->getProperty('responseType');
        $reflection_property->setAccessible(true);
        
        $this->object->setResponseType('Test');
        
        $this->assertEquals('Test',$reflection_property->getValue($this->object));
    }

    /**
     * @covers Ebay\Common\Request::getResponseType
     * @todo   Implement testGetResponseType().
     */
    public function testGetResponseType() {
        
        $reflection = new \ReflectionClass($this->object);
 
        $reflection_property = $reflection->getProperty('responseType');
        $reflection_property->setAccessible(true);
        $reflection_property->setValue($this->object,"Name");
 
        $this->assertEquals("Name",$this->object->getResponseType());
    }

    /**
     * @covers Ebay\Common\Request::getCallName
     * @todo   Implement testGetCallName().
     */
    public function testGetCallName() {
        
        $reflection = new \ReflectionClass($this->object);
 
        $reflection_property = $reflection->getProperty('callName');
        $reflection_property->setAccessible(true);
        $reflection_property->setValue($this->object,"Name");
 
        $this->assertEquals("Name",$this->object->getCallName());
    }

    /**
     * @covers Ebay\Common\Request::addField
     * @todo   Implement testAddField().
     */
    public function testAddField() {
        
        $field = new \Ebay\Common\Field();
        
        $this->object->addField($field);
        
    }

    /**
     * @covers Ebay\Common\Request::addFields
     * @todo   Implement testAddFields().
     */
    public function testAddFields() {
        
        $fields = array(
            new \Ebay\Common\Field(),
            new \Ebay\Common\Field()
                );
        
        $this->object->addFields($fields);        
    }

    /**
     * @covers Ebay\Common\Request::buildRequest
     * @todo   Implement testBuildRequest().
     */
    public function testBuildRequest() {
        
        $response = $this->object->buildRequest();
        
        $this->assertEquals('<?xml version="1.0" encoding="utf-8"?>',$response);
    }

}