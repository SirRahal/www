<?php

namespace Ebay\Service;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-05-27 at 16:04:31.
 */
class BaseTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Base
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
        // Not the best way to do this, but Trading extends Base class
        $this->object = new Trading();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Ebay\Service\Base::setDevId
     * @todo   Implement testSetDevId().
     */
    public function testSetDevId() {
        
        $reflection = new \ReflectionClass($this->object);
 
        $reflection_property = $reflection->getProperty('devId');
        $reflection_property->setAccessible(true);
        
        $this->object->setDevId('Test');
        
        $this->assertEquals('Test',$reflection_property->getValue($this->object));
    }

    /**
     * @covers Ebay\Service\Base::setAppId
     * @todo   Implement testSetAppId().
     */
    public function testSetAppId() {
        
        $reflection = new \ReflectionClass($this->object);
 
        $reflection_property = $reflection->getProperty('appId');
        $reflection_property->setAccessible(true);
        
        $this->object->setAppId('Test');
        
        $this->assertEquals('Test',$reflection_property->getValue($this->object));
    }

    /**
     * @covers Ebay\Service\Base::setCertId
     * @todo   Implement testSetCertId().
     */
    public function testSetCertId() {
        
        $reflection = new \ReflectionClass($this->object);
 
        $reflection_property = $reflection->getProperty('certId');
        $reflection_property->setAccessible(true);
        
        $this->object->setCertId('Test');
        
        $this->assertEquals('Test',$reflection_property->getValue($this->object));
    }

    /**
     * @covers Ebay\Service\Base::setUserToken
     * @todo   Implement testSetUserToken().
     */
    public function testSetUserToken() {
        
        $reflection = new \ReflectionClass($this->object);
 
        $reflection_property = $reflection->getProperty('userToken');
        $reflection_property->setAccessible(true);
        
        $this->object->setUserToken('Test');
        
        $this->assertEquals('Test',$reflection_property->getValue($this->object));
    }

    /**
     * @covers Ebay\Service\Base::setDebugMode
     * @todo   Implement testSetDebugMode().
     */
    public function testSetDebugMode() {
        
        $reflection = new \ReflectionClass($this->object);
 
        $reflection_property = $reflection->getProperty('debugMode');
        $reflection_property->setAccessible(true);
        
        $this->object->setDebugMode(true);
        
        $this->assertTrue($reflection_property->getValue($this->object));
    }

    /**
     * @covers Ebay\Service\Base::setCallVersion
     * @todo   Implement testSetCallVersion().
     */
    public function testSetCallVersion() {
        
        $reflection = new \ReflectionClass($this->object);
 
        $reflection_property = $reflection->getProperty('callVersion');
        $reflection_property->setAccessible(true);
        
        $this->object->setCallVersion('Test');
        
        $this->assertEquals('Test',$reflection_property->getValue($this->object));
    }

    /**
     * @covers Ebay\Service\Base::setSiteId
     * @todo   Implement testSetSiteId().
     */
    public function testSetSiteId() {
        
        $reflection = new \ReflectionClass($this->object);
 
        $reflection_property = $reflection->getProperty('siteId');
        $reflection_property->setAccessible(true);
        
        $this->object->setSiteId('Test');
        
        $this->assertEquals('Test',$reflection_property->getValue($this->object));
    }

}